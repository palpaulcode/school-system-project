package com.example.demoschool.model;

import com.example.demoschool.model.dto.TeacherDto;

import javax.persistence.*;

import java.util.List;
import java.util.stream.Collectors;

import static javax.persistence.GenerationType.SEQUENCE;

/***
 * A Teacher Has Many Subjects --> ManyToOne
 * A ClassStreams Has A Class Teacher (silent here. implemented from ClassStreams side) --> OneToOne
 */
@Entity
@Table(
        name = "Teachers",
        uniqueConstraints = {
              @UniqueConstraint(name = "teacher_email_unique", columnNames = "teacher_email")
        }
)
public class Teacher {
    @Id
    @Column(name = "teacher_id")
    @SequenceGenerator(
            name = "teacher_sequence",
            sequenceName = "teacher_sequence",
            allocationSize = 1
    )
    @GeneratedValue(
            strategy = SEQUENCE,
            generator = "teacher_sequence"
    )
    private Long teacherId;

    @Column(name = "first_name", columnDefinition = "VARCHAR(25)", nullable = false)
    private String firstName;

    @Column(name = "middle_name", columnDefinition = "VARCHAR(25)", nullable = true)
    private String middleName;

    @Column(name = "last_name", columnDefinition = "VARCHAR(25)", nullable = false)
    private String lastName;

    @Column(name = "phone", columnDefinition = "VARCHAR(25)", nullable = false)
    private String phone;

    @Column(name = "teacher_email", columnDefinition = "VARCHAR(50)", nullable = false, unique = true)
    private String email;

    @Column(name = "gender", columnDefinition = "VARCHAR(10)", nullable = false)
    private String gender;

    @Column(name = "teacher_id_no", columnDefinition = "VARCHAR(16)", nullable = false)
    private String idNumber;

    // relation to ClassStreams Entity
    //@OneToOne(fetch = FetchType.LAZY, mappedBy = "teacher")
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "stream_id")
    private ClassStreams stream;

    // relation to Subject
    @OneToMany(targetEntity = Subject.class,
            cascade = CascadeType.ALL,
            fetch = FetchType.LAZY,
            mappedBy = "subjectTeacher")
    private List<Subject> subjects;

    public void addSubject(Subject subject) {
        subjects.add(subject);
    }

    public void removeSubject(Subject subject) {
        subjects.remove(subject);
    }

    // empty constructor
    public Teacher() {
    }

    // id removed from constructor. generated by sequence in database

    /*public Teacher(String firstName,
                   String middleName,
                   String lastName,
                   String phone,
                   String email,
                   String gender,
                   String idNumber,
                   ClassStreams stream,
                   List<Subject> subjects) {
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.phone = phone;
        this.email = email;
        this.gender = gender;
        this.idNumber = idNumber;
        this.stream = stream;
        this.subjects = subjects;
    }*/

    public long getTeacherId() {
        return teacherId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getMiddleName() {
        return middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getIdNumber() {
        return idNumber;
    }

    public void setIdNumber(String idNumber) {
        this.idNumber = idNumber;
    }

    public ClassStreams getStream() {
        return stream;
    }

    public void setStream(ClassStreams stream) {
        this.stream = stream;
    }

    public List<Subject> getSubjects() {
        return subjects;
    }

    public void setSubjects(List<Subject> subjects) {
        this.subjects = subjects;
    }

    @Override
    public String toString() {
        return "Teacher{" +
                "teacherId=" + teacherId +
                ", firstName='" + firstName + '\'' +
                ", middleName='" + middleName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", phone='" + phone + '\'' +
                ", email='" + email + '\'' +
                ", gender='" + gender + '\'' +
                ", idNumber='" + idNumber + '\'' +
                ", stream=" + stream +
                ", subjects=" + subjects +
                '}';
    }

    public static Teacher from(TeacherDto teacherDto) {
        Teacher teacher = new Teacher();
        teacher.setFirstName(teacherDto.getFirstName());
        teacher.setMiddleName(teacherDto.getMiddleName());
        teacher.setLastName(teacherDto.getLastName());
        teacher.setPhone(teacherDto.getPhone());
        teacher.setEmail(teacherDto.getEmail());
        teacher.setGender(teacherDto.getGender());
        teacher.setIdNumber(teacherDto.getIdNumber());
        teacher.setStream(ClassStreams.from(teacherDto.getStreamDto()));
        teacher.setSubjects(teacherDto.getSubjectsDto().stream()
                .map(Subject::from).collect(Collectors.toList()));
        return teacher;
    }
}
