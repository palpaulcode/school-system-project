spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/SchoolDB
spring.datasource.username=springapps
spring.datasource.password=spr1ng@pp
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql = true

#AUTOMATICALLY CREATE DATABASE

# Script Action
# to control which DDL commands we'll generate,
# JPA introduces the script action configuration option:
# We can choose from four different options:
    #none ? does not generate any DDL commands
    #create ? generates only database create commands
    #drop ? generates only database drop commands
    #drop-and-create ? generates database drop commands followed by create commands
#javax.persistence.schema-generation.scripts.action = create

#The Script target
# Secondly, for each specified script action, we'll need to
# define the corresponding target configuration:

# In essence, the script target defines the location of the file that contains the schema
# create or drop commands. So, for instance, if we choose drop-and-create as script action
# we'll need to specify both targets.
#javax.persistence.schema-generation.scripts.create-target=create.sql
#javax.persistence.schema-generation.scripts.drop-target

# The Schema Source
#Finally, to generate the schema DDL commands from our entity models we should
# include the schema source configurations with the metadata option selected:
#javax.persistence.schema-generation.create-source=metadata
#javax.persistence.schema-generation.drop-source=metadata

#spring data jpa configuration
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata



